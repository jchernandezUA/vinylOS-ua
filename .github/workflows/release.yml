name: Release Automation

on:
  push:
    branches:
      - task/ci_cd
    paths:
      - '**'

jobs:
  create-release-branch-and-build-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Print last commit message
        id: commit_message
        run: |
          echo "Last commit message: ${{ github.event.head_commit.message }}"
          echo "commit_message=$(git log -1 --pretty=%B | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Check for Release version in commit message
        id: check_version
        run: |
          if [[ "${{ env.commit_message }}" =~ ^Release\ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "Valid release message found."
            echo "release_found=true" >> $GITHUB_ENV
          else
            echo "No valid release message found."
            echo "release_found=false" >> $GITHUB_ENV
          fi

      - name: Extract version number
        id: extract_version
        if: env.release_found == 'true'
        run: |
          version=$(echo "${{ env.commit_message }}" | grep -oP 'Release \K[0-9]+\.[0-9]+\.[0-9]+')
          echo "version=$version" >> $GITHUB_ENV

      - name: Set up JDK 17
        if: env.release_found == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Download Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 21             # API level for Android 5.0 Lollipop
          target: default            # System image target
          arch: x86                  # Architecture for the emulator
          channel: 0                 # Stable channel for SDK tools

      - name: Create AVD
        run: |
          echo "no" | avdmanager create avd -n test -k "system-images;android-21;default;x86" --device "pixel"

      - name: Start Emulator
        run: |
          nohup $ANDROID_HOME/emulator/emulator -avd test -no-snapshot -no-boot-anim -no-audio -no-window -gpu swiftshader_indirect &
          adb wait-for-device
          adb shell input keyevent 82  # Unlock the emulator screen
        timeout-minutes: 5

      - name: Run Instrumentation Tests
        run: |
          adb devices  # Ensure the emulator is running
          ./gradlew connectedAndroidTest

      - name: Cache Gradle packages
        if: env.release_found == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Decode Keystore
        if: env.release_found == 'true'
        run: |
          echo "${{ secrets.KEY_STORE }}" | base64 -d > app/my-release-key.jks

      - name: Build APK
        if: env.release_found == 'true'
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

        run: ./gradlew assembleRelease

      - name: Check APK Existence
        if: env.release_found == 'true'
        run: |
          ls -l app/build/outputs/apk/release/

      - name: Debug git configuration
        run: |
          git config --list
          git remote -v

      - name: Push release branch to origin
        if: env.release_found == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }} # Usar el token personal de acceso
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/jchernandezUA/vinylOS-ua.git"
          git checkout develop
          git checkout -b release/$version
          git push origin release/$version

      - name: Release
        if: env.release_found == 'true'
        uses: ncipollo/release-action@v1.10.0
        with:
          tag: v$version
          name: Release $version
          draft: false
          prerelease: false
          artifacts: app/build/outputs/apk/release/app-release.apk
          generateReleaseNotes: false
          omitBody: false
          omitBodyDuringUpdate: false
          omitDraftDuringUpdate: false
          omitName: false
          omitNameDuringUpdate: false
          omitPrereleaseDuringUpdate: false
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Merge release branch into main
        if: env.release_found == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }} # Usar el token personal de acceso
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/jchernandezUA/vinylOS-ua.git"
          git fetch --all 
          git checkout main
          git merge --ff-only --allow-unrelated-histories release/$version
          git push origin main
